{"version":3,"sources":["state.tsx","header.tsx","vendor/little-loader.js","player.tsx","serviceWorker.js","index.tsx"],"names":["defaultState","videoHeight","minimized","reducer","state","action","nextState","produce","draft","type","channel","undefined","height","Math","min","window","innerHeight","max","localStorage","setItem","JSON","stringify","saveToStorage","Context","React","displayName","Provider","_ref","_ref$initialState","initialState","children","value","i","getItem","parse","err","loadFromStorage","react","useAppState","Header","header_ChannelSwitcher","ChannelSwitcher","_useAppState","_useAppState2","Object","slicedToArray","dispatch","_React$useState","_React$useState2","setValue","_useDebouncedCallback","useDebouncedCallback","save","className","onChange","e","target","placeholder","autoComplete","autoCorrect","autoCapitalize","spellCheck","load","loadTwitchEmbed","Promise","resolve","reject","useLoadTwitchEmbedJS","createUseResolver","_resolve","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","sent","abrupt","stop","apply","this","arguments","shouldUpdate","Player","dragging","setDragging","_useAppState2$","_useAppState2$$videoH","_React$useState3","throttle","makeActionSetVideoHeight","setHeight","classnames","onMouseDown","classList","contains","onmousemove","onmouseup","y","pageY","document","addEventListener","evt","removeEventListener","player_TwitchPlayer","player_ControlBar","player_Chat","TwitchPlayer","TwitchPlayerRef","_useAppState3","_useAppState4$","_useAppState4$$videoH","el","getElementById","Error","player","current","Twitch","width","offsetWidth","destroy","frame","querySelector","listener","id","style","ControlBar","_useAppState5","onClick","Chat","_useAppState7","frameBorder","scrolling","src","concat","Boolean","location","hostname","match","__webpack_require__","d","__webpack_exports__","src_App","src_Body","App","state_Provider","header_Header","Body","_useLoadTwitchEmbedJS","error","loading","color","toString","player_Player","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a19aab5.chunk.js","sourcesContent":["import * as React from \"react\";\nimport produce from \"immer\";\n\nexport interface State {\n  channel?: string;\n  minimized?: boolean;\n  videoHeight?: number;\n}\n\nexport const defaultState: State = {\n  videoHeight: 300,\n  minimized: false,\n};\n\nexport type Action = ActionSetChannel | ActionToggleMinimized | ActionSetVideoHeight;\nexport type Dispatch = (action: Action) => void;\n\nexport interface ActionSetChannel {\n  type: \"set-channel\";\n  channel?: string;\n}\n\nexport function makeActionSetChannel(channel?: string): ActionSetChannel {\n  return { type: \"set-channel\", channel };\n}\n\nexport interface ActionToggleMinimized {\n  type: \"toggle-minimized\";\n}\n\nexport function makeActionToggleMinimized(): ActionToggleMinimized {\n  return { type: \"toggle-minimized\" };\n}\n\nexport interface ActionSetVideoHeight {\n  type: \"set-video-height\";\n  height?: number;\n}\n\nexport function makeActionSetVideoHeight(height?: number): ActionSetVideoHeight {\n  return { type: \"set-video-height\", height };\n}\n\nfunction reducer(state: State, action: Action) {\n  const nextState = produce(state, (draft) => {\n    switch (action.type) {\n      case \"set-channel\":\n        draft.channel = action.channel || undefined;\n        break;\n      case \"toggle-minimized\":\n        draft.minimized = !draft.minimized;\n        break;\n      case \"set-video-height\":\n        draft.videoHeight =\n          action.height != null ? Math.min(window.innerHeight - 300, Math.max(100, action.height)) : undefined;\n        break;\n    }\n  });\n\n  saveToStorage(nextState);\n  return nextState;\n}\n\nexport type Value = [State, Dispatch];\n\nexport const Context = React.createContext<Value>([{}, () => {}]);\nContext.displayName = \"StateContext\";\n\nfunction loadFromStorage(initialState: State): State {\n  try {\n    const value = localStorage.getItem(\"twitchat.work_data\");\n    if (value == null) return initialState;\n    return JSON.parse(value);\n  } catch (err) {\n    return initialState;\n  }\n}\n\nfunction saveToStorage(state: State) {\n  localStorage.setItem(\"twitchat.work_data\", JSON.stringify(state));\n}\n\nexport const Provider: React.FC<{ initialState?: State }> = function({ initialState = defaultState, children }) {\n  const value = React.useReducer(reducer, initialState, (i) => loadFromStorage(i || {}));\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n\nexport function useAppState() {\n  return React.useContext(Context);\n}\n","import * as React from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { useAppState, makeActionSetChannel } from \"./state\";\n\nexport const Header: React.FC = function() {\n  return (\n    <header>\n      <ChannelSwitcher />\n    </header>\n  );\n};\n\nexport const ChannelSwitcher: React.FC = function() {\n  const [{ channel }, dispatch] = useAppState();\n  const [value, setValue] = React.useState(channel || \"\");\n  const [save] = useDebouncedCallback((value?: string) => dispatch(makeActionSetChannel(value)), 1000, []);\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setValue(e.target.value);\n    save(e.target.value);\n  }\n\n  return (\n    <input\n      type=\"text\"\n      className=\"channel-switcher\"\n      value={value}\n      onChange={onChange}\n      placeholder=\"Enter Channel Name...\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      autoCapitalize=\"off\"\n      spellCheck={false}\n    />\n  );\n};\n","import load from \"little-loader\";\n\nexport default load;\n","import \"./twitch-embed\";\nimport * as React from \"react\";\nimport load from \"./vendor/little-loader\";\nimport { createUseResolver } from \"@pagedip/util-react-resolver\";\nimport classnames from \"classnames\";\n// import { closest } from \"@pagedip/util-closest\";\nimport { useAppState, makeActionToggleMinimized, makeActionSetVideoHeight } from \"./state\";\nimport { throttle } from \"lodash\";\n\nconst loadTwitchEmbed = new Promise<void>((resolve, reject) => {\n  load(\"https://player.twitch.tv/js/embed/v1.js\", (err) => {\n    err ? reject(err) : resolve();\n  });\n});\n\nexport const useLoadTwitchEmbedJS = createUseResolver<void, void>({\n  async resolve() {\n    const result = await loadTwitchEmbed;\n    return result;\n  },\n  shouldUpdate() {\n    return false;\n  },\n});\n\nexport const Player: React.FC = function() {\n  const [dragging, setDragging] = React.useState(false);\n  const [{ minimized, videoHeight = 300 }, dispatch] = useAppState();\n  const [setHeight] = React.useState(() =>\n    throttle((height?: number) => {\n      dispatch(makeActionSetVideoHeight(height));\n    }, 1000 / 30)\n  );\n\n  return (\n    <div\n      className={classnames(\"player\", { dragging, minimized })}\n      onMouseDown={(e) => {\n        const target = e.target as HTMLElement;\n        if (!target.classList.contains(\"control-bar\")) return;\n\n        let onmousemove: (ev: MouseEvent) => any;\n        let onmouseup: (ev: MouseEvent) => any;\n        let y = e.pageY;\n        let height = videoHeight;\n\n        document.addEventListener(\n          \"mousemove\",\n          (onmousemove = (evt) => {\n            setHeight(height + (evt.pageY - y));\n          })\n        );\n\n        document.addEventListener(\n          \"mouseup\",\n          (onmouseup = () => {\n            document.removeEventListener(\"mousemove\", onmousemove);\n            document.removeEventListener(\"mouseup\", onmouseup);\n            setDragging(false);\n          })\n        );\n\n        setDragging(true);\n      }}\n    >\n      <div className=\"click-absorber\" />\n      <TwitchPlayer />\n      <ControlBar />\n      <Chat />\n    </div>\n  );\n};\n\nexport const TwitchPlayer: React.FC = function() {\n  const TwitchPlayerRef = React.useRef<Twitch.Player>();\n  const [{ channel, minimized, videoHeight = 300 }] = useAppState();\n\n  React.useEffect(() => {\n    if (channel == null) return;\n\n    const el = document.getElementById(\"twitch-player\");\n    if (el == null) throw new Error(\"no element\");\n\n    const player = (TwitchPlayerRef.current = new Twitch.Player(\"twitch-player\", {\n      channel,\n      width: el.offsetWidth,\n      height: videoHeight,\n    }));\n\n    return () => {\n      player.destroy();\n      TwitchPlayerRef.current = undefined;\n    };\n  }, [\n    // only the channel, not the height because we only want to recreate the player object when the channel changes\n    channel,\n  ]);\n\n  React.useEffect(() => {\n    const frame: HTMLIFrameElement | null = document.querySelector(\"#twitch-player > iframe\");\n    if (frame) frame.height = videoHeight + \"px\";\n  }, [videoHeight]);\n\n  React.useEffect(() => {\n    let listener: () => any;\n    window.addEventListener(\n      \"resize\",\n      (listener = throttle(() => {\n        const el = document.getElementById(\"twitch-player\");\n        if (el == null) return;\n\n        const frame: HTMLIFrameElement | null = el.querySelector(\"iframe\");\n        if (frame) frame.width = el.offsetWidth + \"px\";\n      }, 250))\n    );\n\n    return () => {\n      window.removeEventListener(\"resize\", listener);\n    };\n  }, []);\n\n  return <div className=\"twitch-player\" id=\"twitch-player\" style={{ height: minimized ? 0 : videoHeight }} />;\n};\n\nexport const ControlBar: React.FC = function() {\n  const [, dispatch] = useAppState();\n\n  return (\n    <div className=\"control-bar\">\n      <button\n        className=\"minimize\"\n        onClick={() => {\n          dispatch(makeActionToggleMinimized());\n        }}\n      />\n    </div>\n  );\n};\n\nexport const Chat: React.FC = function() {\n  const [{ channel }] = useAppState();\n  return channel ? (\n    <iframe\n      className=\"twitch-chat\"\n      frameBorder=\"0\"\n      scrolling=\"no\"\n      src={`https://www.twitch.tv/embed/${channel}/chat`}\n    />\n  ) : null;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport { Provider } from \"./state\";\nimport { Header } from \"./header\";\nimport { Player, useLoadTwitchEmbedJS } from \"./player\";\n// import { Chat } from \"./chat\";\n\nexport const App: React.FC = function() {\n  return (\n    <div className=\"app\">\n      <Provider>\n        <Header />\n        <Body />\n      </Provider>\n    </div>\n  );\n};\n\nexport const Body: React.FC = function() {\n  const { error, loading } = useLoadTwitchEmbedJS();\n\n  if (error) return <div style={{ color: \"red\" }}>{error.toString()}</div>;\n\n  if (loading) return <div>Loading</div>;\n\n  return <Player />;\n};\n\n// import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}